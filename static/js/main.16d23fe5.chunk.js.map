{"version":3,"sources":["components/TopBar.js","components/Bathroom.js","components/BathroomDisplay.js","components/CenterPage.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","AppBar","position","Toolbar","Typography","variant","Component","Bathroom","state","switchStatus","Boolean","statusSimple","prevProps","this","setState","Grid","container","direction","justify","alignItems","style","padding","Paper","bathroom_name","status","Switch","checked","onChange","console","log","switchHandler","dorm","React","determindStatus","index","tmp","BathroomDisplay","bathroomJSON","map","bath","key","name","determineDorm","CenterPage","value","renderBathrooms","handleChange","bind","Axios","get","then","response","Array","isArray","data","bathroom_num","codeHash","post","event","newValue","getBathrooms","interval","setInterval","clearInterval","content","postStatus","Tabs","indicatorColor","textColor","centered","Tab","label","App","className","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.16d23fe5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { AppBar, Typography, Toolbar, TextField, Grid } from '@material-ui/core';\r\n\r\nclass TopBar extends Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <AppBar position=\"sticky\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">\r\n            CC Bathroom Check\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopBar;\r\n","import React from 'react';\r\nimport { Grid, Paper, Switch } from '@material-ui/core';\r\n\r\nexport default class Bathroom extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      switchStatus: Boolean(!this.props.statusSimple)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    this.setState({\r\n      switchStatus: Boolean(!this.props.statusSimple)\r\n    });\r\n  }\r\n\r\n  render(){\r\n\r\n    return(\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-evenly\"\r\n        alignItems=\"stretch\"\r\n        style={{padding: 20}}>\r\n\r\n\r\n        <Paper style={{padding: 15}}>\r\n          {this.props.bathroom_name}\r\n        </Paper>\r\n        <Paper style={{padding: 15}}>\r\n          {this.props.status}\r\n        </Paper>\r\n        <Switch checked={this.state.switchStatus} onChange={() => {\r\n          console.log(\"Switch\");\r\n          this.props.switchHandler(this.props.bathroom_name, this.props.dorm)\r\n          this.setState({\r\n            switchStatus: !this.state.switchStatus\r\n          })\r\n        }}/>\r\n\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n// this.props.switchHandler(this.props.bathroom_name, this.props.dorm)\r\n","import React from 'react';\r\nimport { Paper, Grid } from '@material-ui/core';\r\nimport Bathroom from './Bathroom';\r\n\r\n\r\nfunction determindStatus(index){\r\n  let tmp = \"Occupied\";\r\n  switch(index){\r\n    case 0:\r\n      tmp = \"Occupied\";\r\n      break;\r\n    case 1:\r\n      tmp = \"Unoccupied\";\r\n  }\r\n  return tmp;\r\n}\r\n\r\nexport default class BathroomDisplay extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justify=\"space-between\"\r\n        alignItems=\"stretch\" style={{padding: 20}}>\r\n        {\r\n          this.props.bathroomJSON.map((bath, index) =>\r\n            (<Bathroom key= {index} bathroom_name={bath.name}\r\n                                    dorm={this.props.dorm}\r\n                                    status={determindStatus(bath.status)}\r\n                                    statusSimple={bath.status}\r\n                                    switchHandler={this.props.switchHandler}/>))\r\n        }\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Tabs, Tab, Paper } from '@material-ui/core';\r\nimport BathroomDisplay from './BathroomDisplay';\r\nimport Axios from 'axios';\r\n\r\nfunction determineDorm(index){\r\n  let tmp = \"Err: No Index\";\r\n  console.log(index);\r\n  switch(index){\r\n    case 0:\r\n      tmp = \"Loomis\";\r\n      break;\r\n    case 1:\r\n      tmp = \"Mathias\";\r\n      break;\r\n    case 2:\r\n      tmp = \"South\";\r\n  }\r\n  return tmp;\r\n}\r\n\r\nclass CenterPage extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      value: 0,\r\n      bathroomJSON: [],\r\n      renderBathrooms: true,\r\n      dorm: \"\"\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  getBathrooms(tmp){\r\n    Axios.get(\"https://ccbcb.herokuapp.com/CC/\" + tmp).then(response =>  {\r\n                // console.log(\"RESS \" + response.data)\r\n                if(Array.isArray(response.data)){\r\n                  this.setState({bathroomJSON: response.data,\r\n                                renderBathrooms: true});\r\n                }else{\r\n                  this.setState({renderBathrooms: false});\r\n                }\r\n          });\r\n  }\r\n\r\n  postStatus(bathroom_num, dorm, codeHash){\r\n    Axios.post(\"https://ccbcb.herokuapp.com/CC/\" + dorm + \"/\" + bathroom_num).then(response => {\r\n                    console.log(\"POST Status res: \" + response)\r\n                  });\r\n  }\r\n\r\n  handleChange(event, newValue){\r\n    this.setState({\r\n      value: newValue,\r\n      dorm: determineDorm(newValue)\r\n    },\r\n    () => {\r\n      this.getBathrooms(this.state.dorm)\r\n    });\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({\r\n      dorm: determineDorm(0)\r\n    });\r\n    this.interval = setInterval(() => {\r\n      this.getBathrooms(this.state.dorm);\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render(){\r\n\r\n    const shouldRender = this.state.renderBathrooms;\r\n    let content;\r\n    if(this.state.renderBathrooms){\r\n      content = <BathroomDisplay bathroomJSON={this.state.bathroomJSON}\r\n                                  switchHandler={this.postStatus}\r\n                                  dorm={this.state.dorm}/>;\r\n    }else{\r\n      content = <p>No Bathrooms</p>;\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        <Paper>\r\n          <Tabs\r\n            value={this.state.value}\r\n            onChange={this.handleChange}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            centered>\r\n            <Tab label=\"Loomis\" />\r\n            <Tab label=\"Mathias\" />\r\n            <Tab label=\"South\" />\r\n          </Tabs>\r\n        </Paper>\r\n        {content}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CenterPage;\r\n","import React from 'react';\nimport TopBar from './components/TopBar';\nimport CenterPage from './components/CenterPage';\nimport './App.css';\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TopBar/>\n          <CenterPage/>\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}